# yaml-language-server: $schema=https://www.schemastore.org/github-workflow.json
name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Build
        run: go build ./...
  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Verify that go.mod is already tidy
        run: test -z "$(go mod tidy -diff)"
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run tests
        run: make test
      - name: Update coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          coverage="$(go tool cover -func tmp/cover/merged/cover.out |
            grep '^total:' | awk '{print $3}' | sed 's/%//')"
          if (( $(echo "$coverage < 50" | bc --mathlib) )); then
            color="red"
          elif (( $(echo "$coverage < 60" | bc --mathlib) )); then
            color="orange"
          elif (( $(echo "$coverage < 70" | bc --mathlib) )); then
            color="yellow"
          elif (( $(echo "$coverage < 80" | bc --mathlib) )); then
            color="yellowgreen"
          elif (( $(echo "$coverage < 90" | bc --mathlib) )); then
            color="green"
          else
            color="brightgreen"
          fi
          data="$(jq --null-input --arg message "${coverage}%" --arg color "$color" \
            '{files: {"coverage.json": {content: (
              {schemaVersion:1, label:"coverage", message:$message, color:$color} | tojson
            )}}}')"
          jq --null-input --arg message "${coverage}%" --arg color "$color" \
            '{schemaVersion: 1, label: "coverage", message: $message, color: $color}' > tmp/coverage.json
          gh gist edit "$GIST_ID" tmp/coverage.json
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: 6858b1591174caeee65c12bec018bbad 
      - name: Prepare pages artifact
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p tmp/site
          cp tmp/cover/merged/cover.html tmp/site
      - name: Upload coverage report artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: tmp/site
  pages:
    name: Pages
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build, tidy, test, lint]
    steps:
      - name: Create app token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Create release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json
